

1. Combine Two Tables (LeetCode 175)
*Problem:* Combine two tables, Person and Address, based on the PersonId.

*Solution:*
```
SELECT p.FirstName, p.LastName, a.City, a.State
FROM Person p
LEFT JOIN Address a
ON p.PersonId = a.PersonId;
```

2. Second Highest Salary (LeetCode 176)
*Problem:* Find the second-highest salary in the Employee table.

*Solution:*
```
SELECT DISTINCT Salary AS SecondHighestSalary
FROM Employee
ORDER BY Salary DESC
LIMIT 1 OFFSET 1;
```

Alternatively:
```
SELECT MAX(Salary) AS SecondHighestSalary
FROM Employee
WHERE Salary < (SELECT MAX(Salary) FROM Employee);
```

3. Rank Scores (LeetCode 178)
*Problem:* Rank scores in the Scores table.

*Solution:*
```
SELECT Score, DENSE_RANK() OVER (ORDER BY Score DESC) AS Rank
FROM Scores;
```

4. Consecutive Available Seats (LeetCode 603)
*Problem:* Find consecutive available seats in the Cinema table.

*Solution:*
```
SELECT DISTINCT a.seat_id
FROM cinema a
JOIN cinema b
ON ABS(a.seat_id - b.seat_id) = 1
AND a.free = 1 AND b.free = 1;
```

5. Employees Earning More Than Their Managers (LeetCode 181)
*Problem:* Find employees earning more than their managers.

*Solution:*
```
SELECT e1.Name AS Employee
FROM Employee e1
JOIN Employee e2
ON e1.ManagerId = e2.Id
WHERE e1.Salary > e2.Salary;
```

6. Duplicate Emails (LeetCode 182)
*Problem:* Find duplicate emails in the Person table.

*Solution:*
```
SELECT Email
FROM Person
GROUP BY Email
HAVING COUNT(Email) > 1;
```

7. Customers Who Never Order (LeetCode 183)
*Problem:* Find customers who never order.

*Solution:*
```
SELECT c.Name AS Customers
FROM Customers c
LEFT JOIN Orders o
ON c.Id = o.CustomerId
WHERE o.CustomerId IS NULL;
```

These are just a few examples. If you have a specific problem you'd like help with, feel free to ask!Here are some common LeetCode SQL problems with their solutions:

1. Combine Two Tables (LeetCode 175)
*Problem:* Combine two tables, Person and Address, based on the PersonId.

*Solution:*
```
SELECT p.FirstName, p.LastName, a.City, a.State
FROM Person p
LEFT JOIN Address a
ON p.PersonId = a.PersonId;
```

2. Second Highest Salary (LeetCode 176)
*Problem:* Find the second-highest salary in the Employee table.

*Solution:*
```
SELECT DISTINCT Salary AS SecondHighestSalary
FROM Employee
ORDER BY Salary DESC
LIMIT 1 OFFSET 1;
```

Alternatively:
```
SELECT MAX(Salary) AS SecondHighestSalary
FROM Employee
WHERE Salary < (SELECT MAX(Salary) FROM Employee);
```

3. Rank Scores (LeetCode 178)
*Problem:* Rank scores in the Scores table.

*Solution:*
```
SELECT Score, DENSE_RANK() OVER (ORDER BY Score DESC) AS Rank
FROM Scores;
```

4. Consecutive Available Seats (LeetCode 603)
*Problem:* Find consecutive available seats in the Cinema table.

*Solution:*
```
SELECT DISTINCT a.seat_id
FROM cinema a
JOIN cinema b
ON ABS(a.seat_id - b.seat_id) = 1
AND a.free = 1 AND b.free = 1;
```

5. Employees Earning More Than Their Managers (LeetCode 181)
*Problem:* Find employees earning more than their managers.

*Solution:*
```
SELECT e1.Name AS Employee
FROM Employee e1
JOIN Employee e2
ON e1.ManagerId = e2.Id
WHERE e1.Salary > e2.Salary;
```

6. Duplicate Emails (LeetCode 182)
*Problem:* Find duplicate emails in the Person table.

*Solution:*
```
SELECT Email
FROM Person
GROUP BY Email
HAVING COUNT(Email) > 1;
```

7. Customers Who Never Order (LeetCode 183)
*Problem:* Find customers who never order.

*Solution:*
```
SELECT c.Name AS Customers
FROM Customers c
LEFT JOIN Orders o
ON c.Id = o.CustomerId
WHERE o.CustomerId IS NUll;
